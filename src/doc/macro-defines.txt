This is a simple list of #defines we have in our code.  The macro name has an
underscore on either side if it is a toggle macro - e.g. define it to turn it
on, and otherwise it is off.  Macro names not in this form have some value
associated with them.

#define _DEBUG_
  Enables extra debugging code.  Enabled by default for debug builds.

#define _NO_FLOATS_
  Enables integer-only mode.

#define INPUT_TYPE {SCANF, MMAP}
  Sets which input reader to use (default is SCANF):
    SCANF: a simple scanf reader
    MMAP:  memory-mapped reader

#define AL_TYPE {AL_VECTORS, AL_LL}
  Sets which kind of data structure to store edges with in an adjacency list:
    AL_VECTORS: array-based storage (grows as needed via realloc)
    AL_LL: linked-list-based storage

#define ALG {BEST_ALG, KRUSKAL_*, PRIM_DENSE, PRIM_BHEAP, KKT}
  Sets which algorithm to use (default is BEST_ALG):
    BEST_ALG: choose the algorithm based on empircal density results
    KRUSKAL_EXPLICIT_FS: use kruskal's algorithm with explicit sets and full sort
    KRUSKAL_EXPLICIT_PS: use kruskal's algorithm with explicit sets and partial sort
    KRUSKAL_IMPLICIT_FS: use kruskal's algorithm with implicit sets and full sort
    KRUSKAL_IMPLICIT_PS: use kruskal's algorithm with implicit sets and partial sort
    PRIM_DENSE: Prim's algorithm for dense graphs
    PRIM_BHEAP: Prim's algorithm with binary heaps
    KKT: Karger-Klein-Tarjan randomized algorithm

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
INTERNAL USE ONLY - not set from the makefile

#define _VARIABLE_PRECISION_
  Enables variable precision edge weight support

#define _PARTIAL_QUICK_
  If ALG is KRUSKAL_*_PS then _PARTIAL_QUICK_ causes it to use a partial
  quicksort method to implement partial sorting, rather than a heap

#define GRAPH_TYPE {EDGE_LIST, HEAPIFIED_EDGE_LIST, ADJACENCY_LIST, ADJACENCY_MATRIX}
  Sets which kind of data structure to use populate when reading an input graph.

#define _HALF_ADJ_MATRIX_
  Minimize adjacency matrix assignments by only using half of a full |V|^2
  matrix.  This makes it less efficient to access the matrix since we have to
  ensure u < v when accessing edge (u, v).  We only assign a weight once, so
  duplicating it is mostly a tradeoff between space (worse) and time (better).
